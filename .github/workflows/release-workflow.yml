name: Release Workflow

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write
  repository-projects: write

jobs:
  # Generate changelog and update release notes
  changelog:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main  # Checkout main branch instead of the tag
          
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          
      - name: Get previous release tag
        id: prev_tag
        run: |
          # Get all tags sorted by version
          TAGS=$(git tag -l --sort=-version:refname)
          
          # Get the current tag
          CURRENT_TAG="${{ github.event.release.tag_name }}"
          
          # Find the previous tag
          PREV_TAG=""
          FOUND_CURRENT=false
          for tag in $TAGS; do
            if [ "$FOUND_CURRENT" = true ]; then
              PREV_TAG=$tag
              break
            fi
            if [ "$tag" = "$CURRENT_TAG" ]; then
              FOUND_CURRENT=true
            fi
          done
          
          # If no previous tag found, use the first commit
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREV_TAG"
          
      - name: Generate changelog
        id: changelog
        run: |
          PREV_TAG="${{ steps.prev_tag.outputs.previous_tag }}"
          CURRENT_TAG="${{ github.event.release.tag_name }}"
          
          # Start changelog
          echo "## What's Changed" > changelog.md
          echo "" >> changelog.md
          
          # Get all commits between tags
          COMMITS=$(git log $PREV_TAG..$CURRENT_TAG --pretty=format:"%h %s" --reverse)
          
          # Initialize categories
          FEATURES=""
          FIXES=""
          DOCS=""
          CHORES=""
          OTHER=""
          
          # Parse commits by conventional commit format
          while IFS= read -r commit; do
            HASH=$(echo "$commit" | awk '{print $1}')
            MESSAGE=$(echo "$commit" | cut -d' ' -f2-)
            
            # Create commit link
            COMMIT_LINK="[\`$HASH\`](https://github.com/${{ github.repository }}/commit/$HASH)"
            
            if [[ "$MESSAGE" =~ ^feat(\(.*\))?:\ .* ]]; then
              FEATURES="${FEATURES}- ${MESSAGE} ${COMMIT_LINK}\n"
            elif [[ "$MESSAGE" =~ ^fix(\(.*\))?:\ .* ]]; then
              FIXES="${FIXES}- ${MESSAGE} ${COMMIT_LINK}\n"
            elif [[ "$MESSAGE" =~ ^docs(\(.*\))?:\ .* ]]; then
              DOCS="${DOCS}- ${MESSAGE} ${COMMIT_LINK}\n"
            elif [[ "$MESSAGE" =~ ^(chore|ci|build|test|style|refactor|perf)(\(.*\))?:\ .* ]]; then
              CHORES="${CHORES}- ${MESSAGE} ${COMMIT_LINK}\n"
            else
              OTHER="${OTHER}- ${MESSAGE} ${COMMIT_LINK}\n"
            fi
          done <<< "$COMMITS"
          
          # Write categories to changelog
          if [ -n "$FEATURES" ]; then
            echo "### üöÄ Features" >> changelog.md
            echo -e "$FEATURES" >> changelog.md
          fi
          
          if [ -n "$FIXES" ]; then
            echo "### üêõ Bug Fixes" >> changelog.md
            echo -e "$FIXES" >> changelog.md
          fi
          
          if [ -n "$DOCS" ]; then
            echo "### üìö Documentation" >> changelog.md
            echo -e "$DOCS" >> changelog.md
          fi
          
          if [ -n "$CHORES" ]; then
            echo "### üîß Maintenance" >> changelog.md
            echo -e "$CHORES" >> changelog.md
          fi
          
          if [ -n "$OTHER" ]; then
            echo "### üìù Other Changes" >> changelog.md
            echo -e "$OTHER" >> changelog.md
          fi
          
          # Add Docker images section
          echo "" >> changelog.md
          echo "## üê≥ Docker Images" >> changelog.md
          echo "" >> changelog.md
          echo "Pull the latest image:" >> changelog.md
          echo '```bash' >> changelog.md
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}" >> changelog.md
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> changelog.md
          echo '```' >> changelog.md
          echo "" >> changelog.md
          echo "Run with Docker Compose:" >> changelog.md
          echo '```bash' >> changelog.md
          echo "# Production deployment" >> changelog.md
          echo "docker-compose -f docker-compose.prod.yml up -d" >> changelog.md
          echo "" >> changelog.md
          echo "# Development deployment" >> changelog.md
          echo "docker-compose up -d" >> changelog.md
          echo '```' >> changelog.md
          echo "" >> changelog.md
          
          # Add quick start section
          echo "## üöÄ Quick Start" >> changelog.md
          echo "" >> changelog.md
          echo '```bash' >> changelog.md
          echo "# Create your .env file" >> changelog.md
          echo "cp .env.example .env" >> changelog.md
          echo "" >> changelog.md
          echo "# Edit your configuration" >> changelog.md
          echo "nano .env" >> changelog.md
          echo "" >> changelog.md
          echo "# Run the scheduler" >> changelog.md
          echo "docker run -d \\" >> changelog.md
          echo "  --name coinbase-scheduler \\" >> changelog.md
          echo "  --env-file .env \\" >> changelog.md
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}" >> changelog.md
          echo '```' >> changelog.md
          echo "" >> changelog.md
          
          # Add contributors section
          echo "## üë• Contributors" >> changelog.md
          echo "" >> changelog.md
          
          # Use associative arrays to track contributors
          declare -A GITHUB_USERS
          declare -A AUTHOR_NAMES
          
          # Get unique commit SHAs for this release
          COMMITS=$(git log $PREV_TAG..$CURRENT_TAG --pretty=format:"%H")
          
          # For each commit, try to get GitHub username
          for commit in $COMMITS; do
            # Get commit info from GitHub API
            COMMIT_INFO=$(curl -s -H "Authorization: token ${{ github.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/$commit")
            
            # Extract author email, login, and name
            AUTHOR_EMAIL=$(echo "$COMMIT_INFO" | jq -r '.commit.author.email // empty')
            AUTHOR_LOGIN=$(echo "$COMMIT_INFO" | jq -r '.author.login // empty')
            AUTHOR_NAME=$(echo "$COMMIT_INFO" | jq -r '.commit.author.name // empty')
            
            # Store GitHub username if available
            if [ -n "$AUTHOR_LOGIN" ] && [ -n "$AUTHOR_EMAIL" ]; then
              GITHUB_USERS[$AUTHOR_EMAIL]="@$AUTHOR_LOGIN"
            elif [ -n "$AUTHOR_NAME" ] && [ -n "$AUTHOR_EMAIL" ]; then
              # Only store author name if we don't have a GitHub username for this email
              if [ -z "${GITHUB_USERS[$AUTHOR_EMAIL]}" ]; then
                AUTHOR_NAMES[$AUTHOR_EMAIL]="$AUTHOR_NAME"
              fi
            fi
          done
          
          # Collect all contributors and sort them
          {
            # Output GitHub users
            for email in "${!GITHUB_USERS[@]}"; do
              echo "- ${GITHUB_USERS[$email]}"
            done
            
            # Output author names only if no GitHub username exists for that email
            for email in "${!AUTHOR_NAMES[@]}"; do
              if [ -z "${GITHUB_USERS[$email]}" ]; then
                echo "- ${AUTHOR_NAMES[$email]}"
              fi
            done
          } | sort -u >> changelog.md
          
          echo "" >> changelog.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...$CURRENT_TAG" >> changelog.md
          
          # Output the changelog
          cat changelog.md
          
      - name: Update release with changelog
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          body_path: changelog.md
          append_body: false  # Replace the body instead of appending
          
      - name: Create or Update CHANGELOG.md
        run: |
          # Check if CHANGELOG.md exists
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Create a temporary file with the new entry
          {
            echo "## [${{ github.event.release.tag_name }}] - $(date +%Y-%m-%d)"
            echo ""
            cat changelog.md | sed 's/## What'\''s Changed in .*//'
            echo ""
            echo "---"
            echo ""
          } > new-entry.md
          
          # Prepend the new entry to CHANGELOG.md (after the header)
          head -n 4 CHANGELOG.md > temp-changelog.md
          cat new-entry.md >> temp-changelog.md
          tail -n +5 CHANGELOG.md >> temp-changelog.md
          mv temp-changelog.md CHANGELOG.md
          
          # Clean up temporary files
          rm -f changelog.md new-entry.md
          
      - name: Create Pull Request for CHANGELOG
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          base: main
          commit-message: "docs: update CHANGELOG.md for ${{ github.event.release.tag_name }}"
          title: "üìù Update CHANGELOG for ${{ github.event.release.tag_name }}"
          body: |
            This PR updates the CHANGELOG.md with the latest release notes for ${{ github.event.release.tag_name }}.
            
            ### Changes
            - Added changelog entry for ${{ github.event.release.tag_name }}
            - Updated with commit history since last release
            
            Auto-generated by the release workflow.
          branch: changelog-update-${{ github.event.release.tag_name }}
          delete-branch: true
          labels: |
            documentation
            automated